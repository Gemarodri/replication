{
    "Title" : "VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits",
    "Id" : 283,
    "Date" : 2015,
    "Published" : "CCS",
    "Authors": {
        "Name": ["Henning Perl"],
        "Name2": ["Daniel Arp"],
        "Name3": ["Sascha Fahl"],
        "Country":["Germany"]
        },
    "Type_paper" : "Long (12)",
    "Project" :{ 
        "Name": ["66 projects"], 
        "Dates":["NaN"],
        },
    "Volume_data":{
        "Metric": ["#commits"],
        "Size":[170860 ]
        },
    "Versioning":["Git"],
    "Language_used":["C/C++"],
    "Improved_SZZ": "Yes",
    "TTV_SZZ": "Yes",
    "Purpose":" New method",
    "Elements_risk_assessment":" git blame, which, given a file, for each line names the
commit that last changed the line. The heuristic for finding the commit that introduced a 
vulnerability given a commit that fixed it is as follows:",
    "EaseOf_Reproducibility":"Yes",
    "Design":"quantitative&qualitative",
    "Collection": [""],
    "UseOF-SZZ": "The statistical analysis is more extensive, is done on a much larger
dataset and is only the first step in our system. Based on
the results we train a SVM and create an adaptable system
to predict vulnerability inducing commits.",
    "Summary": " new method of finding potentially dangerous code in code repositories with a significantly
lower false-positive rate than comparable systems",
    "Outcome": " The approach reduces the amount of false alarms by over 99 % at the same
level of recall."
}