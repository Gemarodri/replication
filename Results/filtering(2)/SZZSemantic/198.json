{
    "Title" : "A Hybrid Fault-Proneness Detection Approach Using Text Filtering and
Static Code Analysis",
    "Id" : 198,
    "Date" : 2010,
    "Published" : "International Journal of Advancements in Computing Technology",
    "Authors": {
        "Name": ["Osamu Mizuno"],
        "Name2": ["Hideaki Hata"],
        "Country":["Japan"]
        },
    "Type_paper" : "Journal (12)",
    "Project" :{ 
        "Name": ["BIRT","Groovy","JRuby"], 
        "Dates":["Yes"],
        },
    "Volume_data":{
        "Metric": ["#bugId"],
        "Size":[12749]
        },
    "Versioning":["CVS"],
    "Language_used":["Java"],
    "Improved_SZZ": "No",
    "TTV_SZZ": "Yes",
    "Purpose":"fault-prone detection",
    "Elements_risk_assessment":" We assume that faults are reported just after they are injected in the software",
    "EaseOf_Reproducibility":"Yesa",
    "Design":"",
    "Collection": ["Bugzilla"],
    "UseOF-SZZ": "To extract the fix lines and the location of the Bug fixing changes",
    "Summary": " We have proposed a fault-prone software module detection method using text-filtering approach,
called Fault-proneness filtering",
    "Outcome": " Fault-proneness filtering can capture similar faults related to “braces” and “code size” rules of PMD",
    "More": "[bug-introducing change “faul lines”, and lines of bug fix changes “fix lines”]"
}