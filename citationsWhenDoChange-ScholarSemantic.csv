Title
Trends in Topics at SE Conferences (1993-2013) 
Effort-aware just-in-time defect prediction: simple unsupervised models could be better than supervised models
Examining the Impact of Self-Admitted Technical Debt on Software Quality
Anti-patterns in search-based program repair
Belief & evidence in empirical software engineering
Belief &amp; Evidence in Empirical Software Engineering
Correlation between the Distribution of Software Bugs and Network Motifs 
Defect Prediction: Accomplishments and Future Challenges
Developer Micro Interaction Metrics for Software Defect Prediction
 How Developers Diagnose and Repair Software Bugs
How Software Developers Use Work Breakdown Relationships in Issue Repositories
Identifying Multiple Authors in a Binary Program
Initial and Eventual Software Quality Relating to Continuous Integration in GitHub
Investigating the relation between lexical smells and change- and fault-proneness: an empirical study
Local Variables with Compound Names and Comments as Signs of Fault-Prone Java Methods 
Locus: Locating bugs from software changes
Mutation-aware fault prediction
On the "naturalness" of buggy code
On the &#x0022;Naturalness&#x0022; of Buggy Code 
Predicting Crashing Releases of Mobile Applications
So You Need More Method Level Datasets for Your Software Defect Prediction?: Voil√†!
The Impact of Human Discussions on Just-in-Time Quality Assurance: An Empirical Study on OpenStack and Eclipse
The Impact of Task Granularity on Co-evolution Analyses
Thresholds for Size and Complexity Metrics: A Case Study from the Perspective of Defect Density
Understanding the Contribution of Non-source Documents in Improving Missing Link Recovery: An Empirical Study
An automatic method for assessing the versions affected by a vulnerability
Investigating code review quality: Do people and participation matter?
A Study on the Role of Software Architecture in the Evolution and Quality of Software
An Empirical Study of Highly Impactful Bugs in Mozilla Projects
An Implementation of Just-in-Time Fault-Prone Prediction Technique Using Text Classifier
Analysing the resolution of security bugs in software maintenance
Bottlenecks in Software Defect Prediction Implementation in Industrial Projects
Bug report recommendation for code inspection
Commit guru: analytics and risk prediction of software commits
Data-Augmented Software Diagnosis
Defect prediction as a multiobjective optimization problem
Determining the root causes of various software bugs through software metrics
Discovering loners and phantoms in commit and issue data
Empirical Analysis of Change-Proneness in Methods Having Local Variables with Long Names and Comments
Empirical Software Linguistics: An Investigation of Code Reviews, Recommendations and Faults
How Does Defect Removal Activity of Developer Vary with Development Experience?
Investigating the effect of "defect co-fix" on quality assurance resource allocation: A search-based approach 
Misery loves company: CrowdStacking traces to aid problem detection
On the role of developer's scattered changes in bug prediction
Online Defect Prediction for Imbalanced Data
Performance of Defect Prediction in Rapidly Evolving Software
Replicating and Re-Evaluating the Theory of Relative Defect-Proneness
Towards a Model-based Software Mining Infrastructure
Towards an automation of the traceability of bugs from development logs: a study based on open source software
Towards building a universal defect prediction model with rank transformed predictors
Tracking Static Analysis Violations over Time to Capture Developer Characteristics
Understanding the Software Fault Introduction Process
VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits
Wait for It: Determinants of Pull Request Evaluation Latency on GitHub
Weighted Multi-Factor Multi-Layer Identification of Potential Causes for Events of Interest in Software Repositories 
Why software repositories are not used for defect-insertion circumstance analysis more often: A case study
A Text Filtering Based Approach to Classify Bug Injected and Fixed Changes
A survey on bug-report analysis
An Empirical Methodology to Evaluate Vulnerability Discovery Models
An automated approach to detect violations with high confidence in incremental code using a learning system
An empirical study of dormant bugs
An empirical study of just-in-time defect prediction using cross-project models
Analysing Artefacts Dependencies to Evolving Software Systems 
Anti-pattern Mutations and Fault-proneness 
Assessing modularity using co-change clusters
Bflinks: Reliable Bugfix Links via Bidirectional References and Tuned Heuristics
Bug Inducing Analysis to Prevent Fault Prone Bug Fixes
CoREBench: studying complexity of regression errors
Comparing static bug finders and statistical prediction
Covrig: a framework for the analysis of code, test, and coverage evolution in real software
Early Identification of Future Committers in Open Source Software Projects
Filling the Gaps of Development Logs and Bug Issue Data
Impact of consecutive changes on later file versions
Pre-Silicon Bug Forecast
Predicting software defects with causality tests
Software Defects Classification Prediction Based On Mining Software Repository
Some Code Smells Have a Significant but Small Effect on Faults
Special Issue of the First Workshop on Patterns Promotion and Anti-patterns Prevention (PPAP 2013) Analysing Anti-patterns Static Relationships with Design Patterns 
Studying the Impact of Developer Communication on the Quality and Evolution of a Software System: A Doctoral Dissertation Retrospective 
Survey on Software Defect Prediction
Techniques for Bug-Code Linking
Test Code Quality and Its Relation to Issue Handling Performance
The Learning Curves in Open-Source Software (OSS) Development Network
To what extent could we detect field defects? An extended empirical study of false negatives in static bug-finding tools
Toward Effective Debugging by Capturing and Reusing Knowledge
Towards building a universal defect prediction model
Transition and defect patterns of components in dependency cycles during software evolution
Unveiling developers contributions behind code commits: an exploratory study
Personalized defect prediction
The Impact of Classifier Configuration and Classifier Combination on Bug Localization
A Comparison of Different Defect Measures to Identify Defect-Prone Components
A Systematically Empirical Evaluation of Vulnerability Discovery Models: a Study on Browsers' Vulnerabilities
A characteristic study on failures of production distributed data-parallel programs
A framework for semi-automated software evolution analysis composition
A large-scale empirical study of just-in-time quality assurance
A study of cyclic dependencies on defect profile of software components
A study of variability spaces in open source software
AST Based JAVA Software Evolution Analysis
Analysing Anti-patterns Static Relationships with Design Patterns 
Assessing the Cost Effectiveness of Fault Prediction in Acceptance Testing
Automatic recovery of root causes from bug-fixing changes
Changeset based developer communication to detect software failures
Constructing Defect Predictors and Communicating the Outcomes to Practitioners
Detecting and characterizing semantic inconsistencies in ported code
Dual ecological measures of focus in software development
Effects of Organizational Changes on Product Metrics and Defects
Empirical Evaluation of Bug Linking
HARDFS: hardening HDFS with selective and lightweight versioning
Identifying failure inducing developer pairs within developer networks
Improving Modular Reasoning on Preprocessor-Based Systems
Improving bug localization using correlations in crash reports
Inferring project-specific bug patterns for detecting sibling bugs
It&#039;s not a bug, it&#039;s a feature: how misclassification impacts bug prediction 
It's not a bug, it's a feature: How misclassification impacts bug prediction
Linux variability anomalies: What causes them and how do they get fixed?
Mining A change history to quickly identify bug locations : A case study of the Eclipse project
Mining Software Repositories for Accurate Authorship
Mining system specific rules from change patterns
Mining the relationship between anti-patterns dependencies and fault-proneness
Predicting Bugs in Source Code Changes with Incremental Learning Method
Reducing Features to Improve Code Change-Based Bug Prediction
Replicating mining studies with SOFAS
The (Un)Reliability of NVD Vulnerable Versions Data: an Empirical Experiment on Google Chrome Vulnerabilities
The MSR Cookbook: Mining a decade of research
Towards Reliable Cloud Systems
Towards a Change-oriented Programming Environment
Using Version Control History to Follow the Changes of Source Code Elements
-Using citation influence to predict software defects
Using fault history to improve mutation reduction
When a Patch Goes Bad: Exploring the Properties of Vulnerability-Contributing Commits
Why is collaboration needed in OSS projects? a case study of eclipse project
A Heuristic Rule Reduction Approach to Software Fault-proneness Prediction
A Method for the Identification of Logical Dependencies
A Survey on Mining Software Repositories
A review of process metrics in defect prediction studies
Adapting Linux for mobile platforms: An empirical study of Android
An Idea of an Independent Validation of Vulnerability Discovery Models
An Independent Validation of Vulnerability Discovery
An Independent Validation of Vulnerability Discovery Models
An industrial study on the risk of software changes
Analysis and Characterization of Author Contribution Patterns in Open Source Software Development
Bug Introducing Changes: A Study with Android
Bug introducing changes: A case study with Android
Bug prediction based on fine-grained module histories
Characterizing the roles of classes and their fault-proneness through change metrics
Diffusion of Software Features: An Exploratory Study
Do More Experienced Developers Introduce Fewer Bugs?
Domain specific warnings: Are they any better?
Empirical Studies of Performance Bugs and Performance Analysis Approaches for Software Systems 
Entwicklung eines Werkzeugs zur Extraktion von Mustern aus Software-Archiven zur Quellcode-Optimierung
Identifying Linux bug fixing patches
Locating Source Code to Be Fixed Based on Initial Bug Reports - A Case Study on the Eclipse Project
Method-level bug prediction
Mining challenge 2012: The Android platform
Software Evolution Prediction Using Seasonal Time Analysis: A Comparative Study
Software Security Economics: Theory, in Practice
To what extent could we detect field defects? an empirical study of false negatives in static bug finding tools
Towards Automatic Extraction of the Derivative Relationships of Source Files
When Does a Refactoring Induce Bugs? An Empirical Study
Who? Where? What? Examining distributed development in two large open source projects
Do time of day and developer experience affect commit bugginess
A Preliminary Evaluation of Text-based and Dependency-based Techniques for Determining the Origins of Bugs
Applying Fellegi-Sunter (FS) Model for Traceability Link Recovery between Bug Databases and Version Archives
A Lightweight Approach to Uncover Technical Information in Unstructured Data 
An Entropy Evaluation Approach for Triaging Field Crashes: A Case Study of Mozilla Firefox
An empirical analysis of the FixCache algorithm
An empirical investigation into the role of API-level refactorings during software evolution
An integration resolution algorithm for mining multiple branches in version control systems
Are Developers Fixing Their Own Bugs?: Tracing Bug-Fixing and Bug-Seeding Committers
Assessing programming language impact on development and maintenance: a study on c and c++
BugCache for inspections: hit or miss?
Comparing fine-grained source code changes and code churn for bug prediction
Data mining in software engineering
Dealing with noise in defect prediction
Enabling Precise Interpretations of Software Change Data
Faster issue resolution with higher technical quality of software
Good or Bad Committers? A Case Study of Committers' Cautiousness and the Consequences on the Bug Fixing Process in the Eclipse Project
How Do Fixes Become Bugs? A Comprehensive Characteristic Study on Incorrect Fixes in Commercial and Open Source Operating Systems 
How do fixes become bugs?
Micro interaction metrics for defect prediction
Mining development repositories to study the impact of collaboration on software systems
Ownership, experience and defects: a fine-grained study of authorship
Pragmatic prioritization of software quality assurance efforts
Prioritising Refactoring Using Code Bad Smells
Process Mining Software Repositories
ReLink: recovering links between bugs and changes
Recovering traceability links between source code and fixed bugs via patch analysis
SOFAS: A Lightweight Architecture for Software Analysis as a Service
Security versus performance bugs: a case study on Firefox
Sociotechnical coordination and collaboration in open source software
Using Bug Reports as a Software Quality Measure
Using complexity, coupling, and cohesion metrics as early indicators of vulnerabilities
Using the gini coefficient for bug prediction in eclipse
Vorschlag Hypermodelling: Data Warehousing f√ºr Quelltext 
A Hybrid Fault-Proneness Detection Approach Using Text Filtering and Static Code Analysis 
A Novel Evaluation Method for Defect Prediction in Software Systems
A Systematic Review of Fault Prediction approaches used in Software Engineering 
A machine learning approach for text categorization of fixing-issue commits on CVS
An Analysis of the Effect of Code Ownership on Software Quality across Windows, Eclipse, and Firefox
Automatic construction of an effective training set for prioritizing static analysis warnings
Capturing the long-term impact of changes
Change Bursts as Defect Predictors
Change Bursts as Defect Predictors (21110)
Characterizing and predicting which bugs get fixed: an empirical study of Microsoft Windows
Do stack traces help developers fix bugs?
Does the Past Say It All? Using History to Predict Change Sets in a CMDB
Fostering synergies: how semantic web technology could influence software repositories
Has the bug really been fixed?
LINKSTER: enabling efficient manual inspection and annotation of mined data
Mining and checking object behavior
Mining security changes in FreeBSD
Ownership and Experience in Fix-Inducing Code
Predicting Re-opened Bugs: A Case Study on the Eclipse Project
Propagating Bug Fixes with Fast Subgraph Matching
Revisiting common bug prediction findings using effort-aware models
Studying the Impact of Social Structures on Software Quality
The Influence of Software Maintainability on Issue Handling
The missing links: bugs and bug-fix commits
The usual suspects: a case study on delivered defects per developer
Tracking code patterns over multiple software versions with Herodotos
Understanding the impact of code and process metrics on post-release defects: a case study on the Eclipse project
When process data quality affects the number of bugs: Correlations in software engineering datasets
Which is the right source for vulnerability studies?: an empirical analysis on Mozilla Firefox
A detailed examination of the correlation between imports and failure-proneness of software components
An Analysis of Bug Distribution in Object Oriented Systems
Empirical study of software quality evolution in open source projects using agile practices 
Evaluating Process Quality Based on Change Request Data - An Empirical Study of the Eclipse Project
Evaluating the relation between coding standard violations and faultswithin and across software versions
Fair and balanced?: bias in bug-fix datasets
Fault detection and prediction in an open-source software project
How developer communication frequency relates to bug introducing changes
-Identifying static analysis techniques for finding non-fix hunks in fix revisions
Ldiff: An enhanced line differencing tool
Learning from defect removals
Mining Software History to Improve Software Maintenance Quality: A Case Study
Mining recurrent activities: Fourier analysis of change events
On what basis to recommend: Changesets or interactions?
Predicting defects in SAP Java code: An experience report
Putting It All Together: Using Socio-technical Networks to Predict Failures
Reducing Features to Improve Bug Prediction
Software change classification using hunk metrics
Software process data quality and characteristics: a historical view on open and closed source projects
The Vital Few and Trivial Many: An Empirical Analysis of the Pareto Distribution of Defects
Toward an understanding of bug fix patterns
University of California Riverside Quantitative Decision-making in Software Engineering Riverside for Providing an Excellent Environment for a Student 8154 Miles Away from Home. Thank You Abstract of the Dissertation Quantitative Decision-making in Software Engineering
A Database for the Analysis of Program Change Patterns
A segmentation-based approach for temporal analysis of software version repositories 
Assessing the value of coding standards: An empirical study
Classifying Software Changes: Clean or Buggy?
Comparison of Process Quality Characteristics Based on Change Request Data
Do Crosscutting Concerns Cause Defects?
Domain-Specific Defect Models
s it a bug or an enhancement?: a text-based approach to classify change requests
Predicting Defects in SAP Products: A Replicated Study
Recommending method invocation context changes
SZZ revisited: verifying when changes induce fixes
"A Bug's Life" Visualizing a Bug Database
A survey and taxonomy of approaches for mining software repositories in the context of software evolution
Assisting Bug Report Triage through Recommendation
BTT ‚Äì Towards a Bug Triage Tool
Diploma Thesis Investigating Change Patterns That Fix Bugs Investigating Change Patterns That Fix Bugs
Discovering Dynamic Developer Relationships from Software Version Histories by Time Series Segmentation
Learning from bug-introducing changes to prevent fault prone code
Mining Software Repositories for Traceability Links
Mining software repositories with modified compiler
Predicting Fault Locations from Failures Using a Machine Learning Classifier
Predicting Faults from Cached History
Predicting vulnerable software components
Ranking Significance of Software Class Based on History Information
Software Repositories: A Source for Traceability Links
TIMO KOPONEN Evaluation of Maintenance Processes in Open Source Software Projects Through Defect and Version Management Systems
Threats on building models from CVS and Bugzilla repositories: the Mozilla case study
Which warnings should I fix first?
A lightweight approach to technical risk estimation via probabilistic impact analysis
Adaptive Bug Prediction by Analyzing Project history
Are the Changes Induced by the Defect Reports in the Open Source Software Maintenance?
Automatic Identification of Bug-Introducing Changes
Bug Classification Using Program Slicing Metrics
Enriching revision history with interactions
Exploring the Maintenance Process through the Defect Management in the Open Source Projects - Four Case Studies
How long did it take to fix bugs?
If Your Bug Database Could Talk.
Memories of bug fixes
Micro pattern evolution
Mining metrics to predict component failures
Mining version archives for co-changed lines
On the Use of Process Trails to Understand Software Development
Program element matching for mult¬≠i-version program analyses
Properties of Signature Change Patterns
RaSOSS - Remote Analysis System for Open Source Software
System Utilization and Changes in Implemented Information Systems: A Case Study
TA-RE: an exchange language for mining software repositories
Was Software-Archive erz√§hlen
HATARI: raising risk awareness
When Functions Change Their Names: Automatic Detection of Origin Relationships
